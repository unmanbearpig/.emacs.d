#+TITLE: unmanbearpig's Emacs configuration
#+AUTHOR: unmanbearpig
* Tweak GC
  #+BEGIN_SRC emacs-lisp
 (set 'gc-cons-threshold 100000000)
  #+END_SRC
* Load packages
** Package repositories
  #+BEGIN_SRC emacs-lisp
  (package-initialize)
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (package-initialize)
  #+END_SRC
** use-package
   #+BEGIN_SRC emacs-lisp
   (require 'use-package)
   (setq use-package-always-ensure t)
   #+END_SRC
** Load org-mode from git submodule
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "~/.emacs.d/vendor/org-mode/lisp")
   (add-to-list 'load-path "~/.emacs.d/vendor/org-mode/contrib/lisp" t)
   #+END_SRC
* Defaults
** Revert tags without query
   #+BEGIN_SRC emacs-lisp
   (setq tags-revert-without-query 1)
   #+END_SRC
** Kill whole line
   #+BEGIN_SRC emacs-lisp
   (setq kill-whole-line t)
   #+END_SRC
** Save all without asking on compilation
   #+BEGIN_SRC emacs-lisp
   (setq compilation-ask-about-save nil)
   #+END_SRC
** Adaptive wrapping
   Not sure if I like it
   It seems to not work well in RSpec output

(add-hook 'visual-line-mode-hook
          (lambda ()
            (adaptive-wrap-prefix-mode)))


** Things I'm not sure I need any more
   #+BEGIN_SRC not-emacs-lisp
(defadvice ansi-term (after advise-ansi-term-coding-system)
    (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
(ad-activate 'ansi-term)

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
;;;;;
   #+END_SRC
** Fix unicode in terminal
   Not sure if I actually need it.
   #+BEGIN_SRC emacs-lisp
   (add-hook 'term-exec-hook
          (function
           (lambda ()
             (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))))
   #+END_SRC
** Backup files
   Stolen from emacswiki
   [[https://www.emacswiki.org/emacs/BackupDirectory][EmacsWiki/BackupDirectory]]
   #+BEGIN_SRC emacs-lisp
   (setq
     backup-by-copying t      ; don't clobber symlinks
     backup-directory-alist
      '(("." . "~/.emacs-backups"))    ; don't litter my fs tree
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)       ; use versioned backups
   #+END_SRC
** Subword mode
   #+BEGIN_SRC emacs-lisp
(global-subword-mode t)
   #+END_SRC
** Crux
   #+BEGIN_SRC emacs-lisp
(use-package crux
  :bind (("C-a" . crux-move-beginning-of-line))
)
   #+END_SRC
** M-o to other-window
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-o") 'other-window)
   #+END_SRC
* Appearance
** Disable menu bar
   #+BEGIN_SRC emacs-lisp
   (menu-bar-mode -1)
   #+END_SRC
** Inhibit startup message
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   #+END_SRC
** Hide scroll bar
   #+BEGIN_SRC emacs-lisp
(if (boundp 'toggle-scroll-bar)
    (toggle-scroll-bar -1))
   #+END_SRC
** Hide toolbar
   #+BEGIN_SRC emacs-lisp
   (if window-system
    (tool-bar-mode -1))
   #+END_SRC
** Disable bell
   #+BEGIN_SRC emacs-lisp
   (setq ring-bell-function 'ignore)
   #+END_SRC
** Set font
   #+BEGIN_SRC emacs-lisp
   (set-frame-font "-*-Source Code Pro-normal-normal-normal-*-18-*-*-*-m-0-iso10646-1")
   #+END_SRC
** Show parens
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
   #+END_SRC
** Show size of the buffer
   #+BEGIN_SRC emacs-lisp
   (setq size-indication-mode t)
   #+END_SRC
** Show line and column number
   #+BEGIN_SRC emacs-lisp
   (line-number-mode 1)    ; makes the line number show up
   (column-number-mode 1)  ; makes the column number show up
   #+END_SRC
** Highlight line in certain modes
   #+BEGIN_SRC emacs-lisp
   ;; highlight line in package list and compilation mode
   (add-hook 'package-menu-mode-hook 'hl-line-mode)
   (add-hook 'compilation-mode-hook 'hl-line-mode)
   #+END_SRC
** Wrap lines in compilation mode
   #+BEGIN_SRC emacs-lisp
   (add-hook 'compilation-mode-hook 'visual-line-mode)
   #+END_SRC
** Rainbow delimiters
   #+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

   #+END_SRC
* Org mode
** Org babel languages
   Stolen from https://github.com/danielmai/.emacs.d/blob/master/config.org
   #+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (lisp . t)
   (scheme . t)
   (sh . t)
   (sqlite . t)
   (js . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "C")
           (string= lang "java")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC
** Org babel/source blocks
   I like to have source blocks properly syntax highlighted and with the
   editing popup window staying within the same window so all the windows
   don't jump around. Also, having the top and bottom trailing lines in
   the block is a waste of space, so we can remove them.

   I noticed that fontification doesn't work with markdown mode when the
   block is indented after editing it in the org src buffer---the leading
   #s for headers don't get fontified properly because they appear as Org
   comments. Setting ~org-src-preserve-indentation~ makes things
   consistent as it doesn't pad source blocks with leading spaces.

   #+BEGIN_SRC emacs-lisp
   (setq org-src-fontify-natively t
     org-src-window-setup 'current-window
     org-src-strip-leading-and-trailing-blank-lines t
     org-src-preserve-indentation t
     org-src-tab-acts-natively t)
   #+END_SRC

** org-projectile
   #+BEGIN_SRC emacs-lisp
(use-package org-projectile
  :bind (("C-c n p" . org-projectile:project-todo-completing-read)
         ("C-c c" . org-capture))
  :config
  (progn
    (setq org-projectile:projects-file
          "~/org/projects.org")
    (setq org-agenda-files (append org-agenda-files (org-projectile:todo-files)))
    (add-to-list 'org-capture-templates (org-projectile:project-todo-entry "p")))
  :ensure t)
   #+END_SRC

** org-capture
   #+BEGIN_SRC emacs-lisp
   (setq org-default-notes-file (concat org-directory "/org/notes.org"))
   (setq org-capture-templates
    '(("t" "Todo" entry (file+headline "~/org/todo.org" "Tasks")
           "* TODO %?\n  %i\n  %a")))

   #+END_SRC
** OX-bootstrap
   #+BEGIN_SRC emacs-lisp
(use-package ox-twbs)

   #+END_SRC
* Window and buffer management
** Switch to new window
   #+BEGIN_SRC emacs-lisp
(defun split-window-right-and-switch-to-it ()
  (interactive)
  (split-window-right)
  (other-window 1)
)
(global-set-key (kbd "C-x 3") 'split-window-right-and-switch-to-it)
   #+END_SRC
** Hydra
   #+BEGIN_SRC emacs-lisp
   (defhydra hydra-window (global-map "C-c w")
 "manipulate windows"
 ("0" delete-window)
 ("k" (kill-buffer nil))
 ("2" split-window-below)
 ("2" split-window-below)
 ("3" split-window-right)
 ("+" balance-windows)
 ("o" other-window)
 ("x" delete-window)
 ("H" (shrink-window-horizontally 8))
 ("S" (enlarge-window-horizontally 8))
 ("h" (shrink-window-horizontally 20))
 ("s" (enlarge-window-horizontally 20))
 ("T" (shrink-window 2))
 ("N" (enlarge-window 2))
 ("t" (shrink-window 10))
 ("n" (enlarge-window 10))
 ("," (winner-undo))
 ("." (winner-redo)))
   #+END_SRC
** Kill current buffer
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x k") '(lambda () "Kill current buffer"
                                 (interactive)
                                 (kill-buffer nil)))
   #+END_SRC
** Switch to previous buffer
   Switches between previous and current buffer without any prompts
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x C-b")
                (lambda ()
                  (interactive)
                  (switch-to-buffer nil)))
   #+END_SRC
** Delete buffer file
   Deletes current buffer's file
   #+BEGIN_SRC emacs-lisp
(defun delete-buffer-file ()
  (interactive)
  (delete-file (buffer-file-name))
  (kill-buffer))
   #+END_SRC
** Truncate lines by default
   #+BEGIN_SRC emacs-lisp
   (setq-default truncate-lines t)
   #+END_SRC
** Toggle line wrapping
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x w") 'visual-line-mode)
   #+END_SRC

* Editing
** Indent with 2 spaces
   #+BEGIN_SRC emacs-lisp
   (setq-default tab-width 2)
   (setq tab-width 2)
   (setq standard-indent 2)
   #+END_SRC
** Replace tabs with spaces
   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode nil)
   (setq indent-tabs-mode nil)
   #+END_SRC
** Delete trailing whitespace on save
   #+BEGIN_SRC emacs-lisp
   (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC
** Indent buffer
   #+BEGIN_SRC emacs-lisp
(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max) nil))

   (global-set-key (kbd "<backtab>") 'indent-buffer)
   #+END_SRC
** Search and replace
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x M-r") 'replace-string)
   (global-set-key (kbd "C-x M-C-r") 'replace-regexp)
   #+END_SRC
** C-h like in shell
   Use "C-c h" for help
   #+BEGIN_SRC emacs-lisp
   (define-key key-translation-map [?\C-h] [?\C-?])
   (global-set-key (kbd "C-c h") 'help-command)
   #+END_SRC
** M-h to kill word
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-h") 'backward-kill-word)
   #+END_SRC
** Comment-uncomment region
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c C-d") 'comment-region)
   (global-set-key (kbd "C-c C-u") 'uncomment-region)
   #+END_SRC

** adaptive-wrap
   #+BEGIN_SRC emacs-lisp
   (use-package adaptive-wrap
     :config
     (progn
       (add-hook 'text-mode-hook 'adaptive-wrap-prefix-mode))
       (add-hook 'org-mode-hook 'adaptive-wrap-prefix-mode))
   #+END_SRC
** Multiple cursors
   #+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind (("C-c n n" . mc/mark-next-like-this)))
(defhydra hydra-mc (global-map "C-c m")
              "Multiple cursors"
              ("e" mc/edit-lines)
              ("n" mc/mark-next-like-this)
              ("a" mc/mark-all-like-this))
   #+END_SRC
* Navigation
** Backward and forward paragraph
   #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-p") 'backward-paragraph)
(global-set-key (kbd "M-n") 'forward-paragraph)

(global-set-key (kbd "M-<up>") 'backward-paragraph)
(global-set-key (kbd "M-<down>") 'forward-paragraph)
   #+END_SRC
** Helm
  #+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :bind (("M-x" . helm-M-x)
	 ("C-x C-f" . helm-find-files)
	 ("C-x b" . helm-buffers-list)
	 ("C-c r" . helm-recentf)
         ("M-s M-o" . helm-occur)
	 ("C-c C-c M-x" . execute-extended-command)
	 :map helm-map
	 ("TAB" . helm-execute-persistent-action)
	 ("C-z" . helm-select-action))
  :config (progn
	    (require 'helm-config)
      (helm-mode t)
    (add-to-list 'helm-completing-read-handlers-alist
     '(dired . nil)))
)
  #+END_SRC
*** Remap helm bindings, not sure why
   #+BEGIN_SRC emacs-lisp
   ;; (define-key helm-map (kbd "TAB") 'helm-execute-persistent-action)
   ;; (define-key helm-map (kbd "C-z") 'helm-select-action)
   #+END_SRC

** Counsel / Ivy
   #+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish ivy-mode
  :config (progn ivy-mode))
(use-package counsel
  :diminish counsel-mode
  :bind (("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file)
	 ("C-x b" . ivy-switch-buffer)
	 ("C-c r" . counsel-recentf))
  :config (progn (counsel-mode))
)

(use-package counsel-projectile
   :bind (
     ("C-x f" . counsel-projectile-find-file)
     ("M-s p" . counsel-projectile-ag))
)

   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :ensure t
     :diminish projectile-mode
     :bind (("C-c p f" . projectile-vc))
     :config
     (progn (dolist (filename '("Rakefile" "CHANGELOG.md" "LICENSE" "README.md" "README.rdoc" "LICENSE.md"))
              (add-to-list 'projectile-project-root-files filename t))
            (projectile-global-mode))
   )
   #+END_SRC

** helm-projectile
   #+BEGIN_SRC emacs-lisp-commented-out
   (use-package helm-projectile
     :ensure t
     :bind (("M-s p" . helm-projectile-ag)
            ("C-x f" . helm-projectile-find-file)
   ))
   #+END_SRC
** helm-ag
   #+BEGIN_SRC emacs-lisp
   (use-package ag
     :ensure t
     :config
     (use-package helm-ag
       :ensure t
       :bind ("M-s a" . helm-ag)))
   #+END_SRC
** Swiper
   #+BEGIN_SRC emacs-lisp
   (use-package swiper
     :ensure t
     :bind (("M-s M-s" . swiper))
   )

   #+END_SRC

** Recentf
   #+BEGIN_SRC emacs-lisp
   (recentf-mode 1)
   #+END_SRC
** Enable narrow to region
   #+BEGIN_SRC emacs-lisp
   (put 'narrow-to-region 'disabled nil)
   #+END_SRC
* Version control
** Hydra
    #+BEGIN_SRC emacs-lisp
(defhydra hydra-vc (global-map "C-x v")
  "Version control"
  ("n" git-gutter+-next-hunk)
  ("p" git-gutter+-previous-hunk)
  ("v" magit-status)
  ("s" git-gutter+-stage-hunks)
  ("u" git-gutter+-unstage-whole-buffer)
  ("k" git-gutter+-revert-hunks)
  ("l" magit-log-current)
  ("c" magit-commit)
  ("a" magit-commit-amend)
  ("P" magit-push :exit t)
  ("i" vc-register)
  ("d" magit-diff))
    #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :config
  (progn
 (setq magit-status-buffer-switch-function (quote switch-to-buffer))
    (setq magit-save-repository-buffers "dontask"))
)
   #+END_SRC
** Git gutter
   #+BEGIN_SRC emacs-lisp
   (use-package git-gutter+
    :ensure t
    :diminish git-gutter+-mode
    :config
    (global-git-gutter+-mode t)
   )
   #+END_SRC

** TODO gitignore mode
** TODO git timemachine
* OS Specific
** OS X
   #+BEGIN_SRC emacs-lisp
   (if (eq system-type 'darwin)
    (progn
        (setenv "PATH" (concat "/opt/local/bin:/opt/local/sbin:/usr/local/bin:" (getenv "PATH")))
        (setq exec-path (append '("/opt/local/bin" "/opt/local/sbin" "/usr/local/bin") exec-path))
        (use-package osx-clipboard
          :ensure t
          :diminish osx-clipboard-mode
          :config
          (osx-clipboard-mode +1))))
   #+END_SRC
* Packages
** Hydra
   #+BEGIN_SRC emacs-lisp
   (use-package hydra
     :ensure t)
   #+END_SRC
** Evil
   #+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/projects/stuff/evil")
(setq evil-disable-undo-tree-mode t)
(require 'evil)
;; (evil-mode 1) ;; don't enable by default
   #+END_SRC
** ERC
*** Hide join / part messages
   #+BEGIN_SRC emacs-lisp
(setq erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
(setq erc-lurker-threshold-time 1800)
   #+END_SRC
* TODO Languages
** sass/scss
#+BEGIN_SRC emacs-lisp
 (use-package sass-mode)
#+END_SRC
** web-mode
   #+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :config
  (progn
    (require 'web-mode)
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))))
   #+END_SRC
** rust
   #+BEGIN_SRC emacs-lisp
   (use-package cargo
     :bind (("C-c , r" . cargo-process-test))
   )
   #+END_SRC
** ruby
*** inf-ruby
    (use-package inf-ruby :ensure t)
*** rvm (not sure)
    #+BEGIN_SRC emacs-lisp
    (use-package rvm :ensure t)
    #+END_SRC
*** rspec-mode
    #+BEGIN_SRC emacs-lisp
    (use-package rspec-mode
      :ensure t
      :config
      (progn
        (add-hook 'after-init-hook 'inf-ruby-switch-setup)
        (add-hook 'web-mode-hook 'rspec-verifiable-mode)
        (setq compilation-scroll-output nil)

        (setq rspec-command-options "--format documentation --order rand -p 3")
        (setq rspec-expose-dsl-globally t)
        (setq rspec-use-bundler-when-possible nil)
        (setq rspec-use-rake-when-possible nil)
        (setq rspec-use-rvm nil)

        (add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))
        (add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
        (add-to-list 'auto-mode-alist '("capfile$" . ruby-mode))
        (add-to-list 'auto-mode-alist '("Capfile$" . ruby-mode))
        (add-to-list 'auto-mode-alist '("\\.gemspec$" . ruby-mode))))
    #+END_SRC
*** ruby-hash-syntax
*** rubocop
**** (not sure) ruby-electric
** yaml
*** yaml-mode
** markdown
*** markdown-mode
    #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode)
    #+END_SRC
** javascript
   (autoload 'js2-mode "js2-mode" nil t)
   (add-to-list 'auto-mode-alist '("\\.js$" . js-jsx-mode))
   (add-to-list 'auto-mode-alist '("\\.es6$" . js2-mode))
** json
*** json-mode
** coffee mode
** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :config
  (add-hook 'haskell-mode-hook (
    lambda ()
      (flycheck-mode)
    )))
#+END_SRC
** PureScript
#+BEGIN_SRC emacs-lisp
(use-package purescript-mode)
(use-package psc-ide
  :config
  (add-hook 'purescript-mode-hook
    (lambda ()
      (psc-ide-mode)
      (company-mode)
      (flycheck-mode)
      (turn-on-purescript-indentation)))
)
#+END_SRC
* Snippets
  #+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (progn
      (setq yas-snippet-dirs
        '("~/.emacs.d/snippets"))

      (yas-reload-all)
      (add-hook 'ruby-mode-hook #'yas-minor-mode)
      (add-hook 'web-mode-hook #'yas-minor-mode)
    )
  )
  #+END_SRC
** TODO Wrap things with tags
   https://stackoverflow.com/questions/1558178/wrap-selection-in-open-close-tag-like-textmate

   #+BEGIN_SRC stack-overflow
(defun wrap-lines-in-region-with-html-tag (start end)
  "Wraps the selected text or the point with a tag"
  (interactive "r")
  (let (string)
    (if mark-active
        (list (setq string (buffer-substring start end))
              (delete-region start end)))
    (yas/expand-snippet
     (replace-regexp-in-string "\\(<$1>\\).*\\'" "<${1:p}>"
      (mapconcat
       (lambda (line) (format "%s" line))
       (mapcar
        (lambda (match) (concat "<$1>" match "</${1:$(replace-regexp-in-string \" .*\" \"\" text)}>"))
        (split-string string "[\r\n]")) "\n") t nil 1) (point) (point))))
   #+END_SRC
* Not sure
** smartparens
** restclient
** persp-projectile
** paredit
** magit-filenotify
** helm-flycheck
** exec-path-from-shell
** auto-indent-mode
** anzu
** smart-mode-line
** atom-dark-theme

** auto-complete
   use at all? something else?
* TODO Flycheck/flyspell
