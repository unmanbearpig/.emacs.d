#+TITLE: unmanbearpig's Emacs configuration
#+AUTHOR: unmanbearpig
* Load packages
** Package repositories
  #+BEGIN_SRC emacs-lisp
  (package-initialize)
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (package-initialize)

  (package-install 'use-package)
  (package-install 'hydra)
  #+END_SRC
** use-package
   #+BEGIN_SRC emacs-lisp
   (require 'use-package)
   (setq use-package-always-ensure t)
   #+END_SRC
* Defaults
** Revert tags without query
   #+BEGIN_SRC emacs-lisp
   (setq tags-revert-without-query 1)
   #+END_SRC
** Kill whole line
   #+BEGIN_SRC emacs-lisp
   (setq kill-whole-line t)
   #+END_SRC
** Save all without asking on compilation
   #+BEGIN_SRC emacs-lisp
   (setq compilation-ask-about-save nil)
   #+END_SRC
** Adaptive wrapping
   Not sure if I like it
   It seems to not work well in RSpec output

(add-hook 'visual-line-mode-hook
          (lambda ()
            (adaptive-wrap-prefix-mode)))


** Things I'm not sure I need any more
   #+BEGIN_SRC not-emacs-lisp
(defadvice ansi-term (after advise-ansi-term-coding-system)
    (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
(ad-activate 'ansi-term)

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
;;;;;
   #+END_SRC
** Fix unicode in terminal
   Not sure if I actually need it.
   #+BEGIN_SRC emacs-lisp
   (add-hook 'term-exec-hook
          (function
           (lambda ()
             (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))))
   #+END_SRC
** Backup files
   Stolen from emacswiki
   [[https://www.emacswiki.org/emacs/BackupDirectory][EmacsWiki/BackupDirectory]]
   #+BEGIN_SRC emacs-lisp
   (setq
     backup-by-copying t      ; don't clobber symlinks
     backup-directory-alist
      '(("." . "~/.emacs-backups"))    ; don't litter my fs tree
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)       ; use versioned backups
   #+END_SRC
** Subword mode
   #+BEGIN_SRC emacs-lisp
(global-subword-mode t)
   #+END_SRC
** Crux
   #+BEGIN_SRC emacs-lisp
(use-package crux
  :bind (("C-a" . crux-move-beginning-of-line))
)
   #+END_SRC
** M-o to other-window
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-o") 'other-window)
   #+END_SRC
* Appearance
** Theme
   #+BEGIN_SRC emacs-lisp
(if (display-graphic-p)
    (load-theme 'ujelly t))
   #+END_SRC
** Disable menu bar
   #+BEGIN_SRC emacs-lisp
   (menu-bar-mode -1)
   #+END_SRC
** Inhibit startup message
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   #+END_SRC
** Hide scroll bar
   #+BEGIN_SRC emacs-lisp
(set-scroll-bar-mode nil)
   #+END_SRC
** Hide toolbar
   #+BEGIN_SRC emacs-lisp
   (if window-system
    (tool-bar-mode -1))
   #+END_SRC
** Disable bell
   #+BEGIN_SRC emacs-lisp
   (setq ring-bell-function 'ignore)
   #+END_SRC
** Set font
   #+BEGIN_SRC emacs-lisp
   (set-frame-font "-*-Source Code Pro-normal-normal-normal-*-18-*-*-*-m-0-iso10646-1")
   #+END_SRC
** Show parens
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
   #+END_SRC
** Show size of the buffer
   #+BEGIN_SRC emacs-lisp
   (setq size-indication-mode t)
   #+END_SRC
** Show line and column number
   #+BEGIN_SRC emacs-lisp
   (line-number-mode 1)    ; makes the line number show up
   (column-number-mode 1)  ; makes the column number show up
   #+END_SRC
** Highlight line in certain modes
   #+BEGIN_SRC emacs-lisp
   ;; highlight line in package list and compilation mode
   (add-hook 'package-menu-mode-hook 'hl-line-mode)
   (add-hook 'compilation-mode-hook 'hl-line-mode)
   #+END_SRC
** Wrap lines in compilation mode
   #+BEGIN_SRC emacs-lisp
   (add-hook 'compilation-mode-hook 'visual-line-mode)
   #+END_SRC
** Rainbow delimiters
   #+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :config
  (progn
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  :ensure t))

   #+END_SRC
** Frame background mode
   Make sure that Emacs thinks the background is black, it gets confused for some reason.
   Run after a new frame gets created, otherwise I get weird colors in emacsclient
   #+BEGIN_SRC emacs-lisp
   (defun unmanbearpig-set-background-mode (frame)
     (with-selected-frame frame
       (progn
         (setq frame-background-mode 'dark)
         (frame-set-background-mode nil)
   )))

   (setq after-make-frame-functions #'(select-frame unmanbearpig-set-background-mode))

   ;; set background mode immediately if it's a color frame
   ;; for some reason it makes all colors black and white if I run it in emacs daemon
   ;; which has an extra monochrome frame for some reason
   (if (eq (frame-parameter (selected-frame) 'display-type) 'color)
       (unmanbearpig-set-background-mode (selected-frame)))
   (add-to-list 'after-make-frame-functions #'unmanbearpig-set-background-mode)
   #+END_SRC
** Colors / Faces
*** Mode line / window dividors
**** transparent inactive mode-line / dividors
    #+BEGIN_SRC emacs-lisp
(set-face-background 'mode-line-inactive "transparent")
    #+END_SRC

**** darker active mode-line
     #+BEGIN_SRC emacs-lisp
(set-face-background 'mode-line "grey20")
(set-face-foreground 'mode-line "white")
     #+END_SRC

** Mac specific
   Set command as super and left option as meta.
   #+BEGIN_SRC emacs-lisp
(if (boundp 'mac-command-modifier)
    (setq mac-command-modifier 'super))
(if (boundp 'mac-option-modifier)
    (setq mac-option-modifier 'meta))
  #+END_SRC

   Set right option key as actual mac optional key (insert special characters).
  #+BEGIN_SRC emacs-lisp
(if (boundp 'mac-right-option-modifier)
    (setq mac-right-option-modifier nil))
  #+END_SRC
** Diminish
   #+BEGIN_SRC emacs-lisp
(use-package diminish
  :config (progn (diminish 'auto-revert-mode)
                 (diminish 'company-mode)
                 (diminish 'subword-mode)))
   #+END_SRC
* Org mode
** htmlize
   Needed for exporting from org to html
   #+BEGIN_SRC emacs-lisp
   (use-package htmlize)
   #+END_SRC
** Org babel languages
   Stolen from https://github.com/danielmai/.emacs.d/blob/master/config.org
   #+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (lisp . t)
   (scheme . t)
   (sqlite . t)
   (js . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "C")
           (string= lang "java")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC
** Org babel/source blocks
   I like to have source blocks properly syntax highlighted and with the
   editing popup window staying within the same window so all the windows
   don't jump around. Also, having the top and bottom trailing lines in
   the block is a waste of space, so we can remove them.

   I noticed that fontification doesn't work with markdown mode when the
   block is indented after editing it in the org src buffer---the leading
   #s for headers don't get fontified properly because they appear as Org
   comments. Setting ~org-src-preserve-indentation~ makes things
   consistent as it doesn't pad source blocks with leading spaces.

   #+BEGIN_SRC emacs-lisp
   (setq org-src-fontify-natively t
     org-src-window-setup 'current-window
     org-src-strip-leading-and-trailing-blank-lines t
     org-src-preserve-indentation t
     org-src-tab-acts-natively t)
   #+END_SRC

** org-projectile
   #+BEGIN_SRC emacs-lisp
(use-package org-projectile
  :bind (("C-c n p" . org-projectile:project-todo-completing-read)
         ("C-c c" . org-capture))
  :config
  (progn
    (setq org-projectile:projects-file
          "~/org/projects.org")
    (setq org-agenda-files (append org-agenda-files (org-projectile:todo-files)))
    (add-to-list 'org-capture-templates (org-projectile:project-todo-entry "p")))
  :ensure t)
   #+END_SRC

** org-capture
   #+BEGIN_SRC emacs-lisp
   (setq org-default-notes-file (concat org-directory "/org/notes.org"))
   (setq org-capture-templates
    '(("t" "Todo" entry (file+headline "~/org/todo.org" "Tasks")
           "* TODO %?\n  %i\n  %a")))

   #+END_SRC
** OX-bootstrap
   #+BEGIN_SRC emacs-lisp
(use-package ox-twbs)

   #+END_SRC
** todo-keywords
   #+BEGIN_SRC emacs-lisp
   (setq org-todo-keywords
       '((sequence "TODO" "IN_PROGRESS" "DONE" "LATER")))
   (setq org-todo-keyword-faces '(
                                  ("TODO" . "PINK")
                                  ("DONE" . "GREEN")
                                  ("IN_PROGRESS" . "brightyellow")
                                  ("LATER" . "brightblack")))
   #+END_SRC
** Inline image width
   #+BEGIN_SRC emacs-lisp
(setq org-image-actual-width 800)
   #+END_SRC
** org-agenda
   #+BEGIN_SRC emacs-lisp
(setq org-agenda-files "~/org/.agenda_files")
(global-set-key (kbd "C-c a") 'org-agenda)
   #+END_SRC
* Window and buffer management
** Switch to new window
   #+BEGIN_SRC emacs-lisp
(defun split-window-right-and-switch-to-it ()
  (interactive)
  (split-window-right)
  (other-window 1)
)
(global-set-key (kbd "C-x 3") 'split-window-right-and-switch-to-it)
   #+END_SRC
** Hydra
   #+BEGIN_SRC emacs-lisp
   (defhydra hydra-window (global-map "C-c w")
 "manipulate windows"
 ("0" delete-window)
 ("k" (kill-buffer nil))
 ("2" split-window-below)
 ("2" split-window-below)
 ("3" split-window-right)
 ("+" balance-windows)
 ("o" other-window)
 ("x" delete-window)
 ("H" (shrink-window-horizontally 8))
 ("S" (enlarge-window-horizontally 8))
 ("h" (shrink-window-horizontally 20))
 ("s" (enlarge-window-horizontally 20))
 ("T" (shrink-window 2))
 ("N" (enlarge-window 2))
 ("t" (shrink-window 10))
 ("n" (enlarge-window 10))
 ("," (winner-undo))
 ("." (winner-redo)))
   #+END_SRC
** Kill current buffer
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x k") '(lambda () "Kill current buffer"
                                 (interactive)
                                 (kill-buffer nil)))
   #+END_SRC
** Switch to previous buffer
   Switches between previous and current buffer without any prompts
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x C-b")
                (lambda ()
                  (interactive)
                  (switch-to-buffer nil)))
   #+END_SRC
** Delete buffer file
   Deletes current buffer's file
   #+BEGIN_SRC emacs-lisp
(defun delete-buffer-file ()
  (interactive)
  (delete-file (buffer-file-name))
  (kill-buffer))
   #+END_SRC
** Truncate lines by default
   #+BEGIN_SRC emacs-lisp
   (setq-default truncate-lines t)
   #+END_SRC
** Toggle line wrapping
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x w") 'visual-line-mode)
   #+END_SRC
** Toggle full screen
   #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-f") 'toggle-frame-fullscreen)
(global-set-key (kbd "C-M-s-f") 'toggle-frame-fullscreen)
   #+END_SRC
* Editing
** Indent with 2 spaces
   #+BEGIN_SRC emacs-lisp
   (setq-default tab-width 2)
   (setq tab-width 2)
   (setq standard-indent 2)
   #+END_SRC
** Replace tabs with spaces
   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode nil)
   (setq indent-tabs-mode nil)
   #+END_SRC
** Delete trailing whitespace on save
   #+BEGIN_SRC emacs-lisp
   (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC
** Indent buffer
   #+BEGIN_SRC emacs-lisp
(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max) nil))

   (global-set-key (kbd "<backtab>") 'indent-buffer)
   #+END_SRC
** Search and replace
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x M-r") 'replace-string)
   (global-set-key (kbd "C-x M-C-r") 'replace-regexp)
   #+END_SRC
** C-h like in shell
   Use "C-c h" for help
   #+BEGIN_SRC emacs-lisp
   (define-key key-translation-map [?\C-h] [?\C-?])
   (global-set-key (kbd "C-c h") 'help-command)
   #+END_SRC
** M-h to kill word
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-h") 'backward-kill-word)
   #+END_SRC
** Comment-uncomment region
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c C-d") 'comment-region)
   (global-set-key (kbd "C-c C-u") 'uncomment-region)
   #+END_SRC

** adaptive-wrap
   #+BEGIN_SRC emacs-lisp
   (use-package adaptive-wrap
     :config
     (progn
       (add-hook 'text-mode-hook 'adaptive-wrap-prefix-mode))
       (add-hook 'org-mode-hook 'adaptive-wrap-prefix-mode))
   #+END_SRC
** Multiple cursors
   #+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind (("C-c n n" . mc/mark-next-like-this))
  :config
  (progn
    (defhydra hydra-mc (global-map "C-c m")
      "Multiple cursors"
      ("E" mc/edit-lines)
      ("n" mc/mark-next-like-this)
      ("A" mc/mark-all-like-this)
      ("a" mc/edit-beginnings-of-lines)
      ("e" mc/edit-ends-of-lines))
    (setq mc/always-run-for-all 't)))
   #+END_SRC
** Undo in GUI as in the terminal
   #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C--") 'undo)
   #+END_SRC
** Enable downcase region binding
   #+BEGIN_SRC emacs-lisp
(put 'downcase-region 'disabled nil)
   #+END_SRC
* Dired
** dwim target
   #+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)
   #+END_SRC
* Navigation
** Backward and forward paragraph
   #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-p") 'backward-paragraph)
(global-set-key (kbd "M-n") 'forward-paragraph)

(global-set-key (kbd "M-<up>") 'backward-paragraph)
(global-set-key (kbd "M-<down>") 'forward-paragraph)
   #+END_SRC
** ido-find-file
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x C-f") 'ido-find-file)
   #+END_SRC
** Counsel / Ivy
   #+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish ivy-mode
  :config (progn ivy-mode))
(use-package counsel
  :diminish counsel-mode
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . ivy-switch-buffer)
	 ("C-c r" . counsel-recentf))
  :config (progn (counsel-mode))
)

(use-package counsel-projectile
   :bind (
     ("M-s p" . counsel-projectile-ag))
)

   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :ensure t
     :diminish projectile-mode
     :bind (("C-c p v" . projectile-vc)
            ("C-x f" . projectile-find-file))
     :config
     (progn (dolist (filename '("Rakefile" "CHANGELOG.md" "LICENSE" "README.md" "README.rdoc" "LICENSE.md"))
              (add-to-list 'projectile-project-root-files filename t))
            (projectile-global-mode)
            (setq projectile-completion-system 'ivy))
   )
   #+END_SRC

** Swiper
   #+BEGIN_SRC emacs-lisp
   (use-package swiper
     :ensure t
     :bind (("M-s M-s" . swiper))
   )

   #+END_SRC

** Recentf
   #+BEGIN_SRC emacs-lisp
   (recentf-mode 1)
   #+END_SRC
** Enable narrow to region
   #+BEGIN_SRC emacs-lisp
   (put 'narrow-to-region 'disabled nil)
   #+END_SRC
* Version control
** Hydra
    #+BEGIN_SRC emacs-lisp
(defhydra hydra-vc (global-map "C-x v")
  "Version control"
  ("n" git-gutter+-next-hunk)
  ("p" git-gutter+-previous-hunk)
  ("v" magit-status)
  ("s" git-gutter+-stage-hunks)
  ("u" git-gutter+-unstage-whole-buffer)
  ("k" git-gutter+-revert-hunks)
  ("l" magit-log-current)
  ("c" magit-commit)
  ("a" magit-commit-amend)
  ("P" magit-push :exit t)
  ("i" vc-register)
  ("d" magit-diff))
    #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :config
  (progn
 (setq magit-status-buffer-switch-function (quote switch-to-buffer))
    (setq magit-save-repository-buffers "dontask"))
)
   #+END_SRC
** Git gutter
   #+BEGIN_SRC emacs-lisp
   (use-package git-gutter+
    :ensure t
    :diminish git-gutter+-mode
    :config
    (global-git-gutter+-mode t)
   )
   #+END_SRC

** TODO gitignore mode
** git timemachine
   #+BEGIN_SRC emacs-lisp
(use-package git-timemachine)
   #+END_SRC
* OS Specific
** OS X
   #+BEGIN_SRC emacs-lisp
   (if (eq system-type 'darwin)
    (progn
        (setenv "PATH" (concat "/opt/local/bin:/opt/local/sbin:/usr/local/bin:" (getenv "PATH")))
        (setq exec-path (append '("/opt/local/bin" "/opt/local/sbin" "/usr/local/bin") exec-path))
        (use-package osx-clipboard
          :ensure t
          :diminish osx-clipboard-mode
          :config
          (osx-clipboard-mode +1))))
   #+END_SRC
* Packages
** Hydra
   #+BEGIN_SRC emacs-lisp
   (use-package hydra
     :ensure t)
   #+END_SRC
** Evil
   #+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path "~/projects/stuff/evil")
;; (setq evil-disable-undo-tree-mode t)
;; (require 'evil)
;; (evil-mode 1) ;; don't enable by default
   #+END_SRC
** ERC
*** Hide join / part messages
   #+BEGIN_SRC emacs-lisp
(setq erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
(setq erc-lurker-threshold-time 1800)
   #+END_SRC
* Languages
** Math
   #+BEGIN_SRC emacs-lisp
(use-package company-math
  :config
  (progn
    (add-to-list 'company-backends 'company-math-symbols-unicode)))
   #+END_SRC
** sass/scss
#+BEGIN_SRC emacs-lisp
 (use-package sass-mode)
#+END_SRC
** web-mode
   #+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :config
  (progn
    (require 'web-mode)
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-hook 'web-mode-hook
              (lambda ()
                (emmet-mode)))))
   #+END_SRC
** Emmet-mode
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode)

(defun unmbp/emmet-expand-line-if-webish-mode (arg)
    (interactive "P")
  "Use emmet-expand-line if current mode is web-mode or similar"
  (if (eq major-mode 'web-mode)
      (emmet-expand-line arg))
  )
#+END_SRC

** rust
   #+BEGIN_SRC emacs-lisp
   (use-package cargo
     :bind (("C-c , r" . cargo-process-test))
   )
   #+END_SRC
** ruby
*** inf-ruby
    (use-package inf-ruby :ensure t)
*** chruby
    #+BEGIN_SRC emacs-lisp
    (use-package chruby :ensure t)
    #+END_SRC
*** rspec-mode
    #+BEGIN_SRC emacs-lisp
    (use-package inf-ruby)
    (use-package rspec-mode
      :ensure t
      :config
      (progn
        (add-hook 'after-init-hook 'inf-ruby-switch-setup)
        (add-hook 'web-mode-hook 'rspec-verifiable-mode)
        (setq compilation-scroll-output nil)

        (setq rspec-command-options "--format documentation --order rand -p 3")
        (setq rspec-expose-dsl-globally t)
        (setq rspec-use-bundler-when-possible nil)
        (setq rspec-use-rake-when-possible nil)
        (setq rspec-use-rvm nil)

        (add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))
        (add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
        (add-to-list 'auto-mode-alist '("capfile$" . ruby-mode))
        (add-to-list 'auto-mode-alist '("Capfile$" . ruby-mode))
        (add-to-list 'auto-mode-alist '("\\.gemspec$" . ruby-mode))))
    #+END_SRC
*** ruby-hash-syntax
*** rubocop
*** company-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'ruby-mode-hook 'company-mode)
#+END_SRC
** markdown
*** markdown-mode
    #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode)
    #+END_SRC
** javascript
#+BEGIN_SRC emacs-lisp
(use-package rspec-mode
  :ensure t
  :config
  (progn
    (autoload 'js2-mode "js2-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.js$" . js-jsx-mode))
    (add-to-list 'auto-mode-alist '("\\.es6$" . js2-mode))
    (setq js-indent-level 2)
    )
  )
#+END_SRC

** json-reformat
#+BEGIN_SRC emacs-lisp
(use-package json-reformat
  :config
  (progn
    (setq json-reformat:indent-width 2)
  )
)
#+END_SRC

** json
*** json-mode
** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :config
  (add-hook 'haskell-mode-hook (
    lambda ()
      (flycheck-mode)
      (company-mode)
    )))
#+END_SRC
** PureScript
#+BEGIN_SRC emacs-lisp
(use-package purescript-mode)
(use-package flycheck-purescript)
(use-package psc-ide
  :config
  (add-hook 'purescript-mode-hook
    (lambda ()
      (psc-ide-mode)
      (company-mode)
      (flycheck-mode)
      (turn-on-purescript-indentation)))
)
#+END_SRC
** Elm
   #+BEGIN_SRC emacs-lisp
   (use-package elm-mode)
   (use-package flycheck-elm)

   #+END_SRC
** Toml
   #+BEGIN_SRC emacs-lisp
(use-package toml-mode)
   #+END_SRC
** Python
  #+BEGIN_SRC
  (add-hook 'python-mode-hook 'elpy-mode)
  (with-eval-after-load 'elpy
    (remove-hook 'elpy-modules 'elpy-module-flymake)
    (add-hook 'elpy-mode-hook 'flycheck-mode)
    (add-hook 'elpy-mode-hook 'elpy-use-ipython)
    (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
  #+END_SRC
** Nix
   #+BEGIN_SRC emacs-lisp
   (use-package nix-mode)
   #+END_SRC
** YAML
   #+BEGIN_SRC emacs-lisp
   (use-package yaml-mode)
   #+END_SRC
** Indent-tools
   Useful for yaml editing

   #+BEGIN_SRC emacs-lisp
(use-package indent-tools
  :config (progn
            (add-hook 'yaml-mode-hook
                      (lambda () (define-key yaml-mode-map (kbd "C-c >") 'indent-tools-hydra/body)))))

   #+END_SRC
** Dockerfile
   #+BEGIN_SRC emacs-lisp
   (use-package dockerfile-mode)
   #+END_SRC
* Snippets
  #+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :config
    (progn
      (setq yas-snippet-dirs
        '("~/.emacs.d/snippets"))

      (yas-reload-all)
      (add-hook 'ruby-mode-hook #'yas-minor-mode)
      (add-hook 'web-mode-hook #'yas-minor-mode)
    )
  )
  #+END_SRC
* web-mode + emmet + hippie expand
  #+BEGIN_SRC emacs-lisp
(use-package smart-tab
  :diminish smart-tab-mode
  :config (progn
            (setq smart-tab-using-hippie-expand t)
            (add-hook 'prog-mode-hook 'smart-tab-mode)
            (setq smart-tab-user-provided-completion-function nil);; 'company-complete)
            ))

  (use-package hippie-exp
    :ensure nil
    :defer t
    :bind ("<C-return>" . hippie-expand)
    :config (setq-default hippie-expand-try-functions-list
                          '(yas-hippie-try-expand
                            unmbp/emmet-expand-line-if-webish-mode)))
  #+END_SRC
** TODO Wrap things with tags
   https://stackoverflow.com/questions/1558178/wrap-selection-in-open-close-tag-like-textmate

   #+BEGIN_SRC stack-overflow
(defun wrap-lines-in-region-with-html-tag (start end)
  "Wraps the selected text or the point with a tag"
  (interactive "r")
  (let (string)
    (if mark-active
        (list (setq string (buffer-substring start end))
              (delete-region start end)))
    (yas/expand-snippet
     (replace-regexp-in-string "\\(<$1>\\).*\\'" "<${1:p}>"
      (mapconcat
       (lambda (line) (format "%s" line))
       (mapcar
        (lambda (match) (concat "<$1>" match "</${1:$(replace-regexp-in-string \" .*\" \"\" text)}>"))
        (split-string string "[\r\n]")) "\n") t nil 1) (point) (point))))
   #+END_SRC
* Not sure
** comapny-mode
#+BEGIN_SRC emacs-lisp
   (use-package yasnippet)
   (use-package company
   :config (progn
             (add-hook 'after-init-hook 'global-company-mode)
             (setq company-global-modes '(not inf-ruby-mode)))
(defun check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
        (backward-char 1)
        (if (looking-at "->") t nil)))))


(defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
    (yas/expand)))


(defun tab-indent-or-complete ()
  (interactive)
  (cond
   ((minibufferp)
    (minibuffer-complete))
   (t
    (indent-for-tab-command)
    (if (or (not yas/minor-mode)
            (null (do-yas-expand)))
        (if (check-expansion)
            (progn
              (company-manual-begin)
              (if (null company-candidates)
                  (progn
                    (company-abort)
                    (indent-for-tab-command)))))))))


(defun tab-complete-or-next-field ()
  (interactive)
  (if (or (not yas/minor-mode)
          (null (do-yas-expand)))
      (if company-candidates
          (company-complete-selection)
        (if (check-expansion)
            (progn
              (company-manual-begin)
              (if (null company-candidates)
                  (progn
                    (company-abort)
                    (yas-next-field))))
          (yas-next-field)))))


(defun expand-snippet-or-complete-selection ()
  (interactive)
  (if (or (not yas/minor-mode)
          (null (do-yas-expand))
          (company-abort))
      (company-complete-selection)))


(defun abort-company-or-yas ()
  (interactive)
  (if (null company-candidates)
      (yas-abort-snippet)
    (company-abort)))


(global-set-key [tab] 'tab-indent-or-complete)
(global-set-key (kbd "TAB") 'tab-indent-or-complete)

(global-set-key [(control return)] 'company-complete-common)


(define-key company-active-map [tab] 'expand-snippet-or-complete-selection)
(define-key company-active-map (kbd "TAB") 'expand-snippet-or-complete-selection)

(define-key yas-minor-mode-map [tab] nil)
(define-key yas-minor-mode-map (kbd "TAB") nil)

(define-key yas-keymap [tab] 'tab-complete-or-next-field)
(define-key yas-keymap (kbd "TAB") 'tab-complete-or-next-field)
(define-key yas-keymap [(control tab)] 'yas-next-field)
(define-key yas-keymap (kbd "C-g") 'abort-company-or-yas))

#+END_SRC
** smartparens
** restclient
** persp-projectile
** paredit
** magit-filenotify
** exec-path-from-shell
** auto-indent-mode
** anzu
** smart-mode-line
** dumb-jump
   #+BEGIN_SRC emacs-lisp

(use-package dumb-jump
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g i" . dumb-jump-go-prompt)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config (setq dumb-jump-selector 'ivy)
  :ensure)
   #+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode)
  :config (progn (setq flycheck-disabled-checkers nil)))
  #+END_SRC
* Flyspell
** Modes to enable in
   #+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'turn-on-flyspell)
(add-hook 'markdown-mode-hook 'turn-on-flyspell)
(add-hook 'yaml-mode-hook 'turn-on-flyspell)
   #+END_SRC
* Yafolding
  #+BEGIN_SRC emacs-lisp
(use-package yafolding
  :config (progn (defhydra hydra-folding (global-map "C-x t")
                   "Code folding"
                   ("d" yafolding-hide-element)
                   ("D" yafolding-hide-all)
                   ("u" yafolding-show-element)
                   ("U" yafolding-show-all)
                   ("t" yafolding-toggle-element)
                   ("T" yafolding-toggle-all)))
  )
  #+END_SRC
* Region-state - show number of selected lines
  #+BEGIN_SRC emacs-lisp
(use-package region-state
  :init (region-state-mode))

  #+END_SRC
* Check those out
** TODO string-inflection
   https://github.com/akicho8/string-inflection

   underscore -> UPCASE -> CamelCase conversion of names
** TODO Crux
   https://github.com/bbatsov/crux
*** crux-duplicate-current-line-or-region
*** crux-rename-file-and-buffer
*** crux-delete-file-and-buffer
*** crux-top-join-line
** TODO Prodigy.el
   https://github.com/rejeep/prodigy.el

   Manage system services. not all of them, just the ones that are defined in your config
** TODO web-beautify
   https://github.com/yasuyk/web-beautify

   Format JS
** TODO Git messenger
   https://github.com/syohex/emacs-git-messenger

   Show blame message for current line.
** TODO no littering in emacs config directory
   https://github.com/emacscollective/no-littering

   Not sure if I need this
