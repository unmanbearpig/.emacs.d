#+TITLE: unmanbearpig's Emacs configuration
#+AUTHOR: unmanbearpig

* Load packages
** Package repositories
  #+BEGIN_SRC emacs-lisp
  (package-initialize)
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (package-initialize)
  #+END_SRC
** use-package
   #+BEGIN_SRC emacs-lisp
   (require 'use-package)
   #+END_SRC
* Defaults
** Revert tags without query
   #+BEGIN_SRC emacs-lisp
   (setq tags-revert-without-query 1)
   #+END_SRC
** Things I'm not sure I need any more
   #+BEGIN_SRC not-emacs-lisp
   ;; treat _ as part of a word
(defun set-underscore-as-word-symbol ()
    (modify-syntax-entry ?_ "w"))

(setq kill-whole-line t)

(defadvice ansi-term (after advise-ansi-term-coding-system)
    (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
(ad-activate 'ansi-term)

(setq compilation-ask-about-save nil)
;; don't truncate lines in compilation mode
(add-hook 'compilation-mode-hook
          (lambda ()
            (visual-line-mode t)))

(add-hook 'shell-mode-hook
          (lambda ()
            (visual-line-mode t)))

(add-hook 'visual-line-mode-hook
          (lambda ()
            (adaptive-wrap-prefix-mode)))

(global-subword-mode t)

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
;;;;;
   #+END_SRC
* Appearance
** Disable menu bar
   #+BEGIN_SRC emacs-lisp
   (menu-bar-mode -1)
   #+END_SRC
** Show parens
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
   #+END_SRC
** Show size of the buffer
   #+BEGIN_SRC emacs-lisp
   (setq size-indication-mode t)
   #+END_SRC
* Org mode
** Org babel languages
   Stolen from https://github.com/danielmai/.emacs.d/blob/master/config.org
   #+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (lisp . t)
   (scheme . t)
   (sh . t)
   (sqlite . t)
   (js . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "C")
           (string= lang "java")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC
** Org babel/source blocks
   I like to have source blocks properly syntax highlighted and with the
   editing popup window staying within the same window so all the windows
   don't jump around. Also, having the top and bottom trailing lines in
   the block is a waste of space, so we can remove them.

   I noticed that fontification doesn't work with markdown mode when the
   block is indented after editing it in the org src buffer---the leading
   #s for headers don't get fontified properly because they appear as Org
   comments. Setting ~org-src-preserve-indentation~ makes things
   consistent as it doesn't pad source blocks with leading spaces.

   #+BEGIN_SRC emacs-lisp
   (setq org-src-fontify-natively t
     org-src-window-setup 'current-window
     org-src-strip-leading-and-trailing-blank-lines t
     org-src-preserve-indentation t
     org-src-tab-acts-natively t)
   #+END_SRC

* Window and buffer management
** Hydra
   #+BEGIN_SRC emacs-lisp
   (defhydra hydra-window (global-map "C-c w")
 "manipulate windows"
 ("0" delete-window)
 ("k" (kill-buffer nil))
 ("2" split-window-below)
 ("2" split-window-below)
 ("3" split-window-right)
 ("+" balance-windows)
 ("o" other-window)
 ("x" delete-window)
 ("H" (shrink-window-horizontally 8))
 ("S" (enlarge-window-horizontally 8))
 ("h" (shrink-window-horizontally 20))
 ("s" (enlarge-window-horizontally 20))
 ("T" (shrink-window 2))
 ("N" (enlarge-window 2))
 ("t" (shrink-window 10))
 ("n" (enlarge-window 10))
 ("," (winner-undo))
 ("." (winner-redo)))
   #+END_SRC
** Kill current buffer
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x k") '(lambda () "Kill current buffer"
                                 (interactive)
                                 (kill-buffer nil)))
   #+END_SRC
** Switch to previous buffer
   Switches between previous and current buffer without any prompts
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x C-b")
                (lambda ()
                  (interactive)
                  (switch-to-buffer nil)))
   #+END_SRC
** Delete buffer file
   Deletes current buffer's file
   #+BEGIN_SRC emacs-lisp
(defun delete-buffer-file ()
  (interactive)
  (delete-file (buffer-file-name))
  (kill-buffer))
   #+END_SRC
** Truncate lines by default
   #+BEGIN_SRC emacs-lisp
   (setq-default truncate-lines t)
   #+END_SRC
** Toggle line wrapping
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x w") 'visual-line-mode)
   #+END_SRC

* Editing
** Indent with 2 spaces
   #+BEGIN_SRC emacs-lisp
   (setq-default tab-width 2)
   (setq tab-width 2)
   (setq standard-indent 2)
   #+END_SRC
** Replace tabs with spaces
   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode nil)
   (setq indent-tabs-mode nil)
   #+END_SRC
** Delete trailing whitespace on save
   #+BEGIN_SRC emacs-lisp
   (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC
** Indent buffer
   #+BEGIN_SRC emacs-lisp
(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max) nil))

   (global-set-key (kbd "<backtab>") 'indent-buffer)
   #+END_SRC
** Search and replace
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x M-r") 'replace-string)
   (global-set-key (kbd "C-x M-C-r") 'replace-regexp)
   #+END_SRC
** C-h like in shell
   Use "C-c h" for help
   #+BEGIN_SRC emacs-lisp
   (define-key key-translation-map [?\C-h] [?\C-?])
   (global-set-key (kbd "C-c h") 'help-command)
   #+END_SRC
** M-h to kill word
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-h") 'backward-kill-word)
   #+END_SRC
** Comment-uncomment region
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c C-d") 'comment-region)
   (global-set-key (kbd "C-c C-u") 'uncomment-region)
   #+END_SRC

* Navigation
** Backward and forward paragraph
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-p") 'backward-paragraph)
   (global-set-key (kbd "M-n") 'forward-paragraph)

   (global-set-key (kbd "M-<up>") 'backward-paragraph)
   (global-set-key (kbd "M-<down>") 'forward-paragraph)
   #+END_SRC
** Helm
  #+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :bind (("M-x" . helm-M-x)
	 ("C-x C-f" . helm-find-files)
	 ("C-x b" . helm-buffers-list)
	 ("C-c r" . helm-recentf)
         ("M-s M-o" . helm-occur)
	 ("C-c C-c M-x" . execute-extended-command)
	 :map helm-map
	 ("TAB" . helm-execute-persistent-action)
	 ("C-z" . helm-select-action))
  :config (progn
	    (require 'helm-config)
            (helm-mode t))
)
  #+END_SRC
*** Remap helm bindings, not sure why
   #+BEGIN_SRC emacs-lisp
   ;; (define-key helm-map (kbd "TAB") 'helm-execute-persistent-action)
   ;; (define-key helm-map (kbd "C-z") 'helm-select-action)
   #+END_SRC

** Projectile
   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :ensure t
     :diminish projectile-mode
     :bind (("C-x f" . projectile-find-file))
     :config
     (progn (dolist (filename '("Rakefile" "CHANGELOG.md" "LICENSE" "README.md" "README.rdoc" "LICENSE.md"))
              (add-to-list 'projectile-project-root-files filename t))
            (projectile-global-mode))
   )
   #+END_SRC

** helm-projectile
   #+BEGIN_SRC emacs-lisp
   (use-package helm-projectile
     :ensure t
     :bind ("M-s p" . helm-projectile-ag))
   #+END_SRC
** helm-ag
   #+BEGIN_SRC emacs-lisp
   (use-package ag
     :ensure t
     :config
     (use-package helm-ag
       :ensure t
       :bind ("M-s a" . helm-ag)))
   #+END_SRC
** Swiper
   #+BEGIN_SRC emacs-lisp
   (use-package swiper
     :ensure t
     :bind (("M-s M-s" . swiper))
   )

   #+END_SRC

** Recentf
   #+BEGIN_SRC emacs-lisp
   (recentf-mode 1)
   #+END_SRC
** Enable narrow to region
   #+BEGIN_SRC emacs-lisp
   (put 'narrow-to-region 'disabled nil)
   #+END_SRC
* Version control
** Hydra
    #+BEGIN_SRC emacs-lisp
(defhydra hydra-vc (global-map "C-x v")
  "Version control"
  ("n" git-gutter+-next-hunk)
  ("p" git-gutter+-previous-hunk)
  ("v" magit-status)
  ("s" git-gutter+-stage-hunks)
  ("u" git-gutter+-unstage-whole-buffer)
  ("k" git-gutter+-revert-hunks)
  ("l" magit-log-current)
  ("c" magit-commit)
  ("a" magit-commit-amend)
  ("P" magit-push :exit t)
  ("i" vc-register)
  ("d" magit-diff))
    #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :config
  (progn
    (setq magit-status-buffer-switch-function (quote switch-to-buffer))
    (setq magit-save-repository-buffers "dontask"))
)
   #+END_SRC
** Git gutter
   #+BEGIN_SRC emacs-lisp
   (use-package git-gutter+
    :ensure t
    :config
    (global-git-gutter+-mode t)
   )
   #+END_SRC

** TODO gitignore mode
** TODO git timemachine
* OS Specific
** OS X
   #+BEGIN_SRC emacs-lisp
   (if (eq system-type 'darwin)
    (progn
        (setenv "PATH" (concat "/opt/local/bin:/opt/local/sbin:/usr/local/bin:" (getenv "PATH")))
        (setq exec-path (append '("/opt/local/bin" "/opt/local/sbin" "/usr/local/bin") exec-path))
        (use-package osx-clipboard
          :ensure t
          :diminish osx-clipboard-mode
          :config
          (osx-clipboard-mode +1))))
   #+END_SRC
* Packages
** Hydra
   #+BEGIN_SRC emacs-lisp
   (use-package hydra
     :ensure t)
   #+END_SRC
* Languages
** sass/scss
** web-mode
** rust
** ruby
*** rvm (not sure)
*** rspec-mode
*** ruby-hash-syntax
*** rubocop
**** (not sure) ruby-electric
** yaml
*** yaml-mode
** markdown
*** markdown-mode
** json
*** json-mode
** coffee mode
* Not sure
** smartparens
** restclient
** persp-projectile
** paredit
** magit-filenotify
** helm-flycheck
** exec-path-from-shell
** auto-indent-mode
** anzu
** smart-mode-line
** atom-dark-theme
** adaptive-wrap
